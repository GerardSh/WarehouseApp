// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseApp.Data;

#nullable disable

namespace WarehouseApp.Data.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    partial class WarehouseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WarehouseApp.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31bf5b32-a3f7-4e37-8230-2202a081ea87"),
                            Description = "Products related to computers and accessories such as keyboards, mice, and gaming gear.",
                            Name = "Computers & Peripherals"
                        },
                        new
                        {
                            Id = new Guid("3daadd5e-f5c9-4222-9878-1a02faa44339"),
                            Description = "Furniture and accessories designed for improving office comfort and productivity.",
                            Name = "Office Furniture & Accessories"
                        },
                        new
                        {
                            Id = new Guid("e3edc37f-6ba9-4616-b0c5-98c33451bcdb"),
                            Description = "Small appliances for use at home such as coffee makers, speakers, and chargers.",
                            Name = "Home Appliances"
                        },
                        new
                        {
                            Id = new Guid("314820d6-a4d4-4873-8dec-95e5a6904a8e"),
                            Description = "Technology that you wear, including smartwatches and wireless earbuds.",
                            Name = "Wearable Tech"
                        },
                        new
                        {
                            Id = new Guid("dde109fb-71c5-4f59-8810-3bf4057c5351"),
                            Description = "Storage solutions and backup devices for your data, such as external hard drives and SSDs.",
                            Name = "Storage & Backup"
                        },
                        new
                        {
                            Id = new Guid("26ea2ad2-8d2c-4c43-939f-d7d818572aff"),
                            Description = "Accessories to complement mobile devices, including power banks and docking stations.",
                            Name = "Mobile Accessories"
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Client identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Client's address");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Client's email address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Client's name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Client's phone number");

                    b.HasKey("Id");

                    b.ToTable("Clients", t =>
                        {
                            t.HasComment("Clients in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3b0c442-98fc-1c14-9afb-f4c8996fb924"),
                            Address = "123 Silicon Valley Blvd, San Jose, USA",
                            Email = "info@techsolutions.com",
                            Name = "Tech Solutions Ltd.",
                            PhoneNumber = "+1-408-555-0123"
                        },
                        new
                        {
                            Id = new Guid("3b12c292-b084-491b-9b3d-3e01b7ff2eaf"),
                            Address = "456 Tech Park, San Francisco, USA",
                            Email = "contact@innovelectronics.com",
                            Name = "Innovative Electronics Corp.",
                            PhoneNumber = "+1-415-555-0456"
                        },
                        new
                        {
                            Id = new Guid("f56d3c8b-92a4-4d71-82c7-6f4b9e2c1f0d"),
                            Address = "789 Technology Ave, London, UK",
                            Email = "support@globalittraders.com",
                            Name = "Global IT Traders",
                            PhoneNumber = "+44-20-7946-0301"
                        },
                        new
                        {
                            Id = new Guid("8a3f9b62-1e24-46f1-bc95-71f25a4c0e9a"),
                            Address = "101 Digital Health Park, Berlin, Germany",
                            Email = "sales@smarttechhealth.com",
                            Name = "SmartTech Healthcare Solutions",
                            PhoneNumber = "+49-30-5557-0224"
                        },
                        new
                        {
                            Id = new Guid("ac5b9f38-712d-456b-849f-b7a3e49c5d7e"),
                            Address = "67 Learning Lane, Toronto, Canada",
                            Email = "info@edutechinnovations.com",
                            Name = "EduTech Innovations",
                            PhoneNumber = "+1-416-555-0789"
                        },
                        new
                        {
                            Id = new Guid("d9f1b25c-84e6-4c1a-92b5-3a5e8c0f7b19"),
                            Address = "55 E-commerce Plaza, Paris, France",
                            Email = "orders@retailtechsolutions.com",
                            Name = "Retail Tech Solutions",
                            PhoneNumber = "+33-1-5557-0145"
                        },
                        new
                        {
                            Id = new Guid("b3e2c5a1-7d84-4f6b-91c2-5a7f3b8e9d4f"),
                            Address = "88 Auto Innovations Blvd, Detroit, USA",
                            Email = "service@autotechsystems.com",
                            Name = "AutoTech Systems",
                            PhoneNumber = "+1-313-555-0912"
                        },
                        new
                        {
                            Id = new Guid("a1c4b9e5-7f28-48c1-b62d-4f3a5d7e92b8"),
                            Address = "22 Wall Street, New York, USA",
                            Email = "hello@fintechinnov.com",
                            Name = "FinTech Innovations",
                            PhoneNumber = "+1-646-555-0876"
                        },
                        new
                        {
                            Id = new Guid("f8c3a5d7-21b4-4e9c-86f2-7d5b3a9e1c4b"),
                            Address = "77 Green Field Ave, Sydney, Australia",
                            Email = "contact@agrotechsolutions.com",
                            Name = "AgroTech Solutions",
                            PhoneNumber = "+61-2-5557-0332"
                        },
                        new
                        {
                            Id = new Guid("b2d9f1c5-84e7-4c1b-92a6-3a5e7c0f8b29"),
                            Address = "99 Builder's Road, Dubai, UAE",
                            Email = "projects@constructtechmasters.com",
                            Name = "Construction Tech Masters",
                            PhoneNumber = "+971-4-555-0198"
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ExportInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Export invoice identifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Client");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the export invoice");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Export invoice number");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ExportInvoices", t =>
                        {
                            t.HasComment("Export invoices in the system");
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ExportInvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Export invoice detail identifier");

                    b.Property<Guid>("ExportInvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the ExportInvoice");

                    b.Property<Guid>("ImportInvoiceDetailId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the ImportInvoiceDetail");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product in this export invoice detail");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Unit price of the product in this export invoice detail");

                    b.HasKey("Id");

                    b.HasIndex("ExportInvoiceId");

                    b.HasIndex("ImportInvoiceDetailId");

                    b.ToTable("ExportInvoiceDetails", t =>
                        {
                            t.HasComment("Details about the exported products");
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ImportInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Import invoice identifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Client");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the import invoice");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Unique import invoice number per warehouse");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Warehouse");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("WarehouseId", "InvoiceNumber")
                        .IsUnique();

                    b.ToTable("ImportInvoices", t =>
                        {
                            t.HasComment("Import invoices in the system");
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ImportInvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Import invoice detail identifier");

                    b.Property<Guid>("ImportInvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the ImportInvoice");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product in this import invoice detail");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Unit price of the product in this import invoice detail, optional");

                    b.HasKey("Id");

                    b.HasIndex("ImportInvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ImportInvoiceDetails", t =>
                        {
                            t.HasComment("Details about the imported products");
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product identifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Category");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the product, optional");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Name of the product");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Products available in the warehouse");
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Warehouse identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Warehouse address");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Shows the date of when the warehouse record was created");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if warehouse is deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Warehouse name");

                    b.Property<double?>("Size")
                        .HasColumnType("float")
                        .HasComment("Warehouse size in square meters (m²)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses", t =>
                        {
                            t.HasComment("Warehouses in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470"),
                            Address = "Location A",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse A",
                            Size = 4650.0
                        },
                        new
                        {
                            Id = new Guid("be8f00a5-682d-4b43-9734-d3e17078cb52"),
                            Address = "Location B",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse B",
                            Size = 5200.0
                        },
                        new
                        {
                            Id = new Guid("c3e1a7d3-8e44-4f9b-bf8b-1d3f6e7f8d42"),
                            Address = "Location C",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse C",
                            Size = 4500.0
                        },
                        new
                        {
                            Id = new Guid("d5f6b4e8-3b67-4a7d-bc12-f4a9e6c8d351"),
                            Address = "Location D",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse D",
                            Size = 6300.0
                        },
                        new
                        {
                            Id = new Guid("e8a9c5b7-4d23-49fb-a91b-c6e1f2d8b643"),
                            Address = "Location E",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse E",
                            Size = 7100.0
                        },
                        new
                        {
                            Id = new Guid("f1c2d4a6-5b34-42d8-9c12-e3a7b8f6d921"),
                            Address = "Location F",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse F",
                            Size = 5400.0
                        },
                        new
                        {
                            Id = new Guid("a2b3c4d5-6e78-4f9a-bc12-d4e5f6a7b891"),
                            Address = "Location G",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse G",
                            Size = 5900.0
                        },
                        new
                        {
                            Id = new Guid("b4c5d6e7-8f91-42a3-bc12-e3f4a5d6b782"),
                            Address = "Location H",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse H",
                            Size = 4800.0
                        },
                        new
                        {
                            Id = new Guid("c6d7e8f9-1a23-45b4-bc12-d3e4f5a6b891"),
                            Address = "Location I",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse I",
                            Size = 5200.0
                        },
                        new
                        {
                            Id = new Guid("d8e9f1a2-3b45-47c6-bc12-e2f3a4d5b691"),
                            Address = "Location J",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse J",
                            Size = 6000.0
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ExportInvoice", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.Client", "Client")
                        .WithMany("ExportInvoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ExportInvoiceDetail", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.ExportInvoice", "ExportInvoice")
                        .WithMany("ExportInvoicesDetails")
                        .HasForeignKey("ExportInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Data.Models.ImportInvoiceDetail", "ImportInvoiceDetail")
                        .WithMany("ExportInvoicesPerProduct")
                        .HasForeignKey("ImportInvoiceDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExportInvoice");

                    b.Navigation("ImportInvoiceDetail");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ImportInvoice", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.Client", "Client")
                        .WithMany("ImportInvoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Data.Models.Warehouse", "Warehouse")
                        .WithMany("ImportInvoices")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ImportInvoiceDetail", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.ImportInvoice", "ImportInvoice")
                        .WithMany("ImportInvoicesDetails")
                        .HasForeignKey("ImportInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Data.Models.Product", "Product")
                        .WithMany("ImportInvoicesDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ImportInvoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Product", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Client", b =>
                {
                    b.Navigation("ExportInvoices");

                    b.Navigation("ImportInvoices");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ExportInvoice", b =>
                {
                    b.Navigation("ExportInvoicesDetails");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ImportInvoice", b =>
                {
                    b.Navigation("ImportInvoicesDetails");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ImportInvoiceDetail", b =>
                {
                    b.Navigation("ExportInvoicesPerProduct");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Product", b =>
                {
                    b.Navigation("ImportInvoicesDetails");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Warehouse", b =>
                {
                    b.Navigation("ImportInvoices");
                });
#pragma warning restore 612, 618
        }
    }
}
