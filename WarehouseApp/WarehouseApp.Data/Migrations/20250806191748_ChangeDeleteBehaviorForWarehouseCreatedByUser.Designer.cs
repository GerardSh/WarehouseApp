// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseApp.Data;

#nullable disable

namespace WarehouseApp.Data.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20250806191748_ChangeDeleteBehaviorForWarehouseCreatedByUser")]
    partial class ChangeDeleteBehaviorForWarehouseCreatedByUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Full name of the user");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("Extended Identity user with application-specific properties");
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ApplicationUserWarehouse", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the ApplicationUser");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("UsersWarehouses", t =>
                        {
                            t.HasComment("Mapping table between application users and warehouses");
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Category identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the category , optional");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Name of the category ");

                    b.HasKey("Id");

                    b.ToTable("Categories", t =>
                        {
                            t.HasComment("Categories in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("31bf5b32-a3f7-4e37-8230-2202a081ea87"),
                            Description = "Products related to computers and accessories such as keyboards, mice, and gaming gear.",
                            Name = "Computers & Peripherals"
                        },
                        new
                        {
                            Id = new Guid("3daadd5e-f5c9-4222-9878-1a02faa44339"),
                            Description = "Furniture and accessories designed for improving office comfort and productivity.",
                            Name = "Office Furniture & Accessories"
                        },
                        new
                        {
                            Id = new Guid("e3edc37f-6ba9-4616-b0c5-98c33451bcdb"),
                            Description = "Small appliances for use at home such as coffee makers, speakers, and chargers.",
                            Name = "Home Appliances"
                        },
                        new
                        {
                            Id = new Guid("314820d6-a4d4-4873-8dec-95e5a6904a8e"),
                            Description = "Technology that you wear, including smartwatches and wireless earbuds.",
                            Name = "Wearable Tech"
                        },
                        new
                        {
                            Id = new Guid("dde109fb-71c5-4f59-8810-3bf4057c5351"),
                            Description = "Storage solutions and backup devices for your data, such as external hard drives and SSDs.",
                            Name = "Storage & Backup"
                        },
                        new
                        {
                            Id = new Guid("26ea2ad2-8d2c-4c43-939f-d7d818572aff"),
                            Description = "Accessories to complement mobile devices, including power banks and docking stations.",
                            Name = "Mobile Accessories"
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Client identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Client's address");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Client's email address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Client's name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Client's phone number");

                    b.HasKey("Id");

                    b.ToTable("Clients", t =>
                        {
                            t.HasComment("Clients in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3b0c442-98fc-1c14-9afb-f4c8996fb924"),
                            Address = "123 Silicon Valley Blvd, San Jose, USA",
                            Email = "info@techsolutions.com",
                            Name = "Tech Solutions Ltd.",
                            PhoneNumber = "+1-408-555-0123"
                        },
                        new
                        {
                            Id = new Guid("3b12c292-b084-491b-9b3d-3e01b7ff2eaf"),
                            Address = "456 Tech Park, San Francisco, USA",
                            Email = "contact@innovelectronics.com",
                            Name = "Innovative Electronics Corp.",
                            PhoneNumber = "+1-415-555-0456"
                        },
                        new
                        {
                            Id = new Guid("f56d3c8b-92a4-4d71-82c7-6f4b9e2c1f0d"),
                            Address = "789 Technology Ave, London, UK",
                            Email = "support@globalittraders.com",
                            Name = "Global IT Traders",
                            PhoneNumber = "+44-20-7946-0301"
                        },
                        new
                        {
                            Id = new Guid("8a3f9b62-1e24-46f1-bc95-71f25a4c0e9a"),
                            Address = "101 Digital Health Park, Berlin, Germany",
                            Email = "sales@smarttechhealth.com",
                            Name = "SmartTech Healthcare Solutions",
                            PhoneNumber = "+49-30-5557-0224"
                        },
                        new
                        {
                            Id = new Guid("ac5b9f38-712d-456b-849f-b7a3e49c5d7e"),
                            Address = "67 Learning Lane, Toronto, Canada",
                            Email = "info@edutechinnovations.com",
                            Name = "EduTech Innovations",
                            PhoneNumber = "+1-416-555-0789"
                        },
                        new
                        {
                            Id = new Guid("d9f1b25c-84e6-4c1a-92b5-3a5e8c0f7b19"),
                            Address = "55 E-commerce Plaza, Paris, France",
                            Email = "orders@retailtechsolutions.com",
                            Name = "Retail Tech Solutions",
                            PhoneNumber = "+33-1-5557-0145"
                        },
                        new
                        {
                            Id = new Guid("b3e2c5a1-7d84-4f6b-91c2-5a7f3b8e9d4f"),
                            Address = "88 Auto Innovations Blvd, Detroit, USA",
                            Email = "service@autotechsystems.com",
                            Name = "AutoTech Systems",
                            PhoneNumber = "+1-313-555-0912"
                        },
                        new
                        {
                            Id = new Guid("a1c4b9e5-7f28-48c1-b62d-4f3a5d7e92b8"),
                            Address = "22 Wall Street, New York, USA",
                            Email = "hello@fintechinnov.com",
                            Name = "FinTech Innovations",
                            PhoneNumber = "+1-646-555-0876"
                        },
                        new
                        {
                            Id = new Guid("f8c3a5d7-21b4-4e9c-86f2-7d5b3a9e1c4b"),
                            Address = "77 Green Field Ave, Sydney, Australia",
                            Email = "contact@agrotechsolutions.com",
                            Name = "AgroTech Solutions",
                            PhoneNumber = "+61-2-5557-0332"
                        },
                        new
                        {
                            Id = new Guid("b2d9f1c5-84e7-4c1b-92a6-3a5e7c0f8b29"),
                            Address = "99 Builder's Road, Dubai, UAE",
                            Email = "projects@constructtechmasters.com",
                            Name = "Construction Tech Masters",
                            PhoneNumber = "+971-4-555-0198"
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ExportInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Export invoice identifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Client");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the export invoice");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Export invoice number");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Warehouse");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("WarehouseId", "InvoiceNumber")
                        .IsUnique();

                    b.ToTable("ExportInvoices", t =>
                        {
                            t.HasComment("Export invoices in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4c7e1a5-4392-4f86-92d1-0b5f3a7c46f2"),
                            ClientId = new Guid("8a3f9b62-1e24-46f1-bc95-71f25a4c0e9a"),
                            Date = new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "EXP001",
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("a1d1c8f3-91b0-4f62-b7b1-b1d13a7e75c8"),
                            ClientId = new Guid("8a3f9b62-1e24-46f1-bc95-71f25a4c0e9a"),
                            Date = new DateTime(2025, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "EXP002",
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("4db5f5f4-8be3-4ecf-98cd-6d4a4f1d2cf2"),
                            ClientId = new Guid("8a3f9b62-1e24-46f1-bc95-71f25a4c0e9a"),
                            Date = new DateTime(2025, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "EXP003",
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("8b5c1e28-1bc7-4c70-bb2e-2f2c8e5b39f5"),
                            ClientId = new Guid("f56d3c8b-92a4-4d71-82c7-6f4b9e2c1f0d"),
                            Date = new DateTime(2025, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "EXP004",
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("b65c7e3a-76a3-42b3-bbc2-73c1a693743e"),
                            ClientId = new Guid("b2d9f1c5-84e7-4c1b-92a6-3a5e7c0f8b29"),
                            Date = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "EXP005",
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("fe7f4c16-f76f-42e9-bbfe-6c9e6b87e33b"),
                            ClientId = new Guid("f8c3a5d7-21b4-4e9c-86f2-7d5b3a9e1c4b"),
                            Date = new DateTime(2025, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "EXP006",
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("dcb7f1ae-b8f1-4670-93b2-5e7ff7d3c3c6"),
                            ClientId = new Guid("d9f1b25c-84e6-4c1a-92b5-3a5e8c0f7b19"),
                            Date = new DateTime(2025, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "EXP007",
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("3f36e42f-799b-4d60-a96f-3f07947a66d0"),
                            ClientId = new Guid("e3b0c442-98fc-1c14-9afb-f4c8996fb924"),
                            Date = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "EXP008",
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("bc107ca4-2833-4f26-9d1e-36ab9080c418"),
                            ClientId = new Guid("f56d3c8b-92a4-4d71-82c7-6f4b9e2c1f0d"),
                            Date = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "EXP009",
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("cae789ba-1bcd-4e32-b57c-8243fc4d8d19"),
                            ClientId = new Guid("d9f1b25c-84e6-4c1a-92b5-3a5e8c0f7b19"),
                            Date = new DateTime(2025, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "EXP010",
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ExportInvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Export invoice detail identifier");

                    b.Property<Guid>("ExportInvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the ExportInvoice");

                    b.Property<Guid>("ImportInvoiceDetailId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the ImportInvoiceDetail");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product in this export invoice detail");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Unit price of the product in this export invoice detail");

                    b.HasKey("Id");

                    b.HasIndex("ImportInvoiceDetailId");

                    b.HasIndex("ExportInvoiceId", "ImportInvoiceDetailId")
                        .IsUnique();

                    b.ToTable("ExportInvoiceDetails", t =>
                        {
                            t.HasComment("Details about the exported products");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc98d9a1-6e55-4b1e-99a4-1e1f36b0c1c1"),
                            ExportInvoiceId = new Guid("f4c7e1a5-4392-4f86-92d1-0b5f3a7c46f2"),
                            ImportInvoiceDetailId = new Guid("5b53a1d4-7b7b-4127-bdb4-388c870e7082"),
                            Quantity = 5,
                            UnitPrice = 209.99m
                        },
                        new
                        {
                            Id = new Guid("b73f4d10-f2a9-4983-a96b-95ff3f3a67f0"),
                            ExportInvoiceId = new Guid("f4c7e1a5-4392-4f86-92d1-0b5f3a7c46f2"),
                            ImportInvoiceDetailId = new Guid("35f5e0b1-8e2e-4e2e-b46c-e1f392ff65a4"),
                            Quantity = 5,
                            UnitPrice = 309.99m
                        },
                        new
                        {
                            Id = new Guid("d09c3c46-f247-4a7e-a7b0-0ab7b2cf8039"),
                            ExportInvoiceId = new Guid("a1d1c8f3-91b0-4f62-b7b1-b1d13a7e75c8"),
                            ImportInvoiceDetailId = new Guid("5b53a1d4-7b7b-4127-bdb4-388c870e7082"),
                            Quantity = 5,
                            UnitPrice = 209.99m
                        },
                        new
                        {
                            Id = new Guid("e6a2b1f9-6df5-4d0e-9877-137b191c6b80"),
                            ExportInvoiceId = new Guid("a1d1c8f3-91b0-4f62-b7b1-b1d13a7e75c8"),
                            ImportInvoiceDetailId = new Guid("d91fd94a-79f8-4023-9cc5-502a9ffacfd7"),
                            Quantity = 12,
                            UnitPrice = 69.99m
                        },
                        new
                        {
                            Id = new Guid("a059a5c3-e759-40a1-8d02-b1a3f8c04dc2"),
                            ExportInvoiceId = new Guid("a1d1c8f3-91b0-4f62-b7b1-b1d13a7e75c8"),
                            ImportInvoiceDetailId = new Guid("c5b2f2fa-f5de-4172-b558-b8a0aa31cbd4"),
                            Quantity = 2,
                            UnitPrice = 99.99m
                        },
                        new
                        {
                            Id = new Guid("06b2a659-5a9c-4ad3-a324-55b2b06d7f27"),
                            ExportInvoiceId = new Guid("4db5f5f4-8be3-4ecf-98cd-6d4a4f1d2cf2"),
                            ImportInvoiceDetailId = new Guid("c5b2f2fa-f5de-4172-b558-b8a0aa31cbd4"),
                            Quantity = 1,
                            UnitPrice = 99.99m
                        },
                        new
                        {
                            Id = new Guid("f86c942d-c6c0-4cc5-8b33-768647f3e96e"),
                            ExportInvoiceId = new Guid("4db5f5f4-8be3-4ecf-98cd-6d4a4f1d2cf2"),
                            ImportInvoiceDetailId = new Guid("cf13a1ec-99fc-4f7c-a635-45f35fc72ad5"),
                            Quantity = 10,
                            UnitPrice = 220.00m
                        },
                        new
                        {
                            Id = new Guid("46c8c119-faf9-4e3c-8be1-0f3de6c287d4"),
                            ExportInvoiceId = new Guid("4db5f5f4-8be3-4ecf-98cd-6d4a4f1d2cf2"),
                            ImportInvoiceDetailId = new Guid("39e3849a-b72d-4372-94f6-7e42f7c3cb35"),
                            Quantity = 3,
                            UnitPrice = 100.00m
                        },
                        new
                        {
                            Id = new Guid("e2517aef-6fd1-4d08-9a20-c632582d5b32"),
                            ExportInvoiceId = new Guid("4db5f5f4-8be3-4ecf-98cd-6d4a4f1d2cf2"),
                            ImportInvoiceDetailId = new Guid("b0a77ed1-4c9b-4056-a05c-f01e6be521f0"),
                            Quantity = 4,
                            UnitPrice = 320.00m
                        },
                        new
                        {
                            Id = new Guid("59e1bd10-c198-4b30-b5e4-0fc97a77d8c1"),
                            ExportInvoiceId = new Guid("8b5c1e28-1bc7-4c70-bb2e-2f2c8e5b39f5"),
                            ImportInvoiceDetailId = new Guid("ebef2229-41c0-41fa-a56c-f3a9d7618ad4"),
                            Quantity = 12,
                            UnitPrice = 150.00m
                        },
                        new
                        {
                            Id = new Guid("991cbf9e-c58e-4d13-9988-7ddf3de1d91e"),
                            ExportInvoiceId = new Guid("b65c7e3a-76a3-42b3-bbc2-73c1a693743e"),
                            ImportInvoiceDetailId = new Guid("cf13a1ec-99fc-4f7c-a635-45f35fc72ad5"),
                            Quantity = 3,
                            UnitPrice = 220.00m
                        },
                        new
                        {
                            Id = new Guid("87a64d60-e444-4b84-b88f-9d5c78d4fc72"),
                            ExportInvoiceId = new Guid("b65c7e3a-76a3-42b3-bbc2-73c1a693743e"),
                            ImportInvoiceDetailId = new Guid("f44fa9ea-cf1b-4c1d-936e-b31f4d7298d3"),
                            Quantity = 3,
                            UnitPrice = 159.50m
                        },
                        new
                        {
                            Id = new Guid("cb884fc2-b770-4632-9a10-29b4b5e16e64"),
                            ExportInvoiceId = new Guid("fe7f4c16-f76f-42e9-bbfe-6c9e6b87e33b"),
                            ImportInvoiceDetailId = new Guid("7a1bfb82-7a6e-47f9-bbbf-81093e4a2876"),
                            Quantity = 4,
                            UnitPrice = 330.00m
                        },
                        new
                        {
                            Id = new Guid("bc09320d-4e82-4b8b-89a6-f9eb69a401d6"),
                            ExportInvoiceId = new Guid("fe7f4c16-f76f-42e9-bbfe-6c9e6b87e33b"),
                            ImportInvoiceDetailId = new Guid("ebef2229-41c0-41fa-a56c-f3a9d7618ad4"),
                            Quantity = 2,
                            UnitPrice = 150.00m
                        },
                        new
                        {
                            Id = new Guid("4e0d9c60-1051-4a0e-a676-bd2a3a24b1cf"),
                            ExportInvoiceId = new Guid("dcb7f1ae-b8f1-4670-93b2-5e7ff7d3c3c6"),
                            ImportInvoiceDetailId = new Guid("328cc44d-d73f-4956-b2cb-dc7cd1c4f437"),
                            Quantity = 10,
                            UnitPrice = 105.00m
                        },
                        new
                        {
                            Id = new Guid("763b9cb0-d02d-468b-83ef-1f245b599d93"),
                            ExportInvoiceId = new Guid("3f36e42f-799b-4d60-a96f-3f07947a66d0"),
                            ImportInvoiceDetailId = new Guid("39e3849a-b72d-4372-94f6-7e42f7c3cb35"),
                            Quantity = 3,
                            UnitPrice = 100.00m
                        },
                        new
                        {
                            Id = new Guid("a0f0e6bd-8a18-4be8-931b-bd2928b8bbd7"),
                            ExportInvoiceId = new Guid("bc107ca4-2833-4f26-9d1e-36ab9080c418"),
                            ImportInvoiceDetailId = new Guid("cf13a1ec-99fc-4f7c-a635-45f35fc72ad5"),
                            Quantity = 1,
                            UnitPrice = 220.00m
                        },
                        new
                        {
                            Id = new Guid("92e4e83c-2b56-40d0-aefd-f99d9ff7030b"),
                            ExportInvoiceId = new Guid("bc107ca4-2833-4f26-9d1e-36ab9080c418"),
                            ImportInvoiceDetailId = new Guid("ebef2229-41c0-41fa-a56c-f3a9d7618ad4"),
                            Quantity = 3,
                            UnitPrice = 150.0m
                        },
                        new
                        {
                            Id = new Guid("cfcb0e87-8be3-44ef-bad6-417dc560e0e6"),
                            ExportInvoiceId = new Guid("bc107ca4-2833-4f26-9d1e-36ab9080c418"),
                            ImportInvoiceDetailId = new Guid("f44fa9ea-cf1b-4c1d-936e-b31f4d7298d3"),
                            Quantity = 2,
                            UnitPrice = 159.5m
                        },
                        new
                        {
                            Id = new Guid("3f218f66-7b42-429c-bb02-5cd9b7d1147b"),
                            ExportInvoiceId = new Guid("cae789ba-1bcd-4e32-b57c-8243fc4d8d19"),
                            ImportInvoiceDetailId = new Guid("ebef2229-41c0-41fa-a56c-f3a9d7618ad4"),
                            Quantity = 2,
                            UnitPrice = 150.0m
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ImportInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Import invoice identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the import invoice");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Unique import invoice number per warehouse");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Client");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Warehouse");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId", "InvoiceNumber")
                        .IsUnique();

                    b.ToTable("ImportInvoices", t =>
                        {
                            t.HasComment("Import invoices in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d3e97b5-119e-4cf2-8b78-4f5478a5a401"),
                            Date = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV001",
                            SupplierId = new Guid("e3b0c442-98fc-1c14-9afb-f4c8996fb924"),
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("d9784351-b2f6-44e5-ae5c-45615df7a102"),
                            Date = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV002",
                            SupplierId = new Guid("3b12c292-b084-491b-9b3d-3e01b7ff2eaf"),
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("a1cfe4a7-dbc3-4c8f-9582-02efc6ea47f3"),
                            Date = new DateTime(2025, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV003",
                            SupplierId = new Guid("f56d3c8b-92a4-4d71-82c7-6f4b9e2c1f0d"),
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("b2d5cb4e-fc88-4c9f-9e9e-4a6a3f4e70d4"),
                            Date = new DateTime(2025, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV004",
                            SupplierId = new Guid("a1c4b9e5-7f28-48c1-b62d-4f3a5d7e92b8"),
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("8e9d59b2-f682-4e4b-8230-538eef5772dc"),
                            Date = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV005",
                            SupplierId = new Guid("b2d9f1c5-84e7-4c1b-92a6-3a5e7c0f8b29"),
                            WarehouseId = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470")
                        },
                        new
                        {
                            Id = new Guid("fa61f3b4-e46f-496e-b90f-bd470f5b68ac"),
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV006",
                            SupplierId = new Guid("8a3f9b62-1e24-46f1-bc95-71f25a4c0e9a"),
                            WarehouseId = new Guid("be8f00a5-682d-4b43-9734-d3e17078cb52")
                        },
                        new
                        {
                            Id = new Guid("e50e7e92-b28f-47f7-99f3-ff442f234cb2"),
                            Date = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV007",
                            SupplierId = new Guid("e3b0c442-98fc-1c14-9afb-f4c8996fb924"),
                            WarehouseId = new Guid("be8f00a5-682d-4b43-9734-d3e17078cb52")
                        },
                        new
                        {
                            Id = new Guid("f8ed3bb4-d255-4928-8a29-c24e045f302d"),
                            Date = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV008",
                            SupplierId = new Guid("b3e2c5a1-7d84-4f6b-91c2-5a7f3b8e9d4f"),
                            WarehouseId = new Guid("be8f00a5-682d-4b43-9734-d3e17078cb52")
                        },
                        new
                        {
                            Id = new Guid("a38f5c8b-c8d6-4590-bf5f-f5d616f1c1b7"),
                            Date = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV009",
                            SupplierId = new Guid("f56d3c8b-92a4-4d71-82c7-6f4b9e2c1f0d"),
                            WarehouseId = new Guid("be8f00a5-682d-4b43-9734-d3e17078cb52")
                        },
                        new
                        {
                            Id = new Guid("c4f631f3-16a1-47a4-8987-5a4b9a24b4d6"),
                            Date = new DateTime(2025, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV010",
                            SupplierId = new Guid("a1c4b9e5-7f28-48c1-b62d-4f3a5d7e92b8"),
                            WarehouseId = new Guid("be8f00a5-682d-4b43-9734-d3e17078cb52")
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ImportInvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Import invoice detail identifier");

                    b.Property<Guid>("ImportInvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the ImportInvoice");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product in this import invoice detail");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Unit price of the product in this import invoice detail, optional");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ImportInvoiceId", "ProductId")
                        .IsUnique();

                    b.ToTable("ImportInvoiceDetails", t =>
                        {
                            t.HasComment("Details about the imported products");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b53a1d4-7b7b-4127-bdb4-388c870e7082"),
                            ImportInvoiceId = new Guid("4d3e97b5-119e-4cf2-8b78-4f5478a5a401"),
                            ProductId = new Guid("a6a5c1b8-d5bc-46b5-b75c-0152e35e344e"),
                            Quantity = 10,
                            UnitPrice = 199.99m
                        },
                        new
                        {
                            Id = new Guid("35f5e0b1-8e2e-4e2e-b46c-e1f392ff65a4"),
                            ImportInvoiceId = new Guid("4d3e97b5-119e-4cf2-8b78-4f5478a5a401"),
                            ProductId = new Guid("72c4bc6d-72f5-4b43-b299-cb1bcaa4cd93"),
                            Quantity = 5,
                            UnitPrice = 299.99m
                        },
                        new
                        {
                            Id = new Guid("f44fa9ea-cf1b-4c1d-936e-b31f4d7298d3"),
                            ImportInvoiceId = new Guid("d9784351-b2f6-44e5-ae5c-45615df7a102"),
                            ProductId = new Guid("a4b3c7d5-9e1f-4f86-bc2d-0b5d4e3c7981"),
                            Quantity = 8,
                            UnitPrice = 149.50m
                        },
                        new
                        {
                            Id = new Guid("c5b2f2fa-f5de-4172-b558-b8a0aa31cbd4"),
                            ImportInvoiceId = new Guid("d9784351-b2f6-44e5-ae5c-45615df7a102"),
                            ProductId = new Guid("a0b5d4c3-7e92-4f81-bc2d-5f3a7d1e4689"),
                            Quantity = 3,
                            UnitPrice = 89.99m
                        },
                        new
                        {
                            Id = new Guid("d91fd94a-79f8-4023-9cc5-502a9ffacfd7"),
                            ImportInvoiceId = new Guid("a1cfe4a7-dbc3-4c8f-9582-02efc6ea47f3"),
                            ProductId = new Guid("ed2b3c7f-8a45-4d9e-80f4-b1c7d2a0f9b2"),
                            Quantity = 12,
                            UnitPrice = 59.99m
                        },
                        new
                        {
                            Id = new Guid("cf13a1ec-99fc-4f7c-a635-45f35fc72ad5"),
                            ImportInvoiceId = new Guid("b2d5cb4e-fc88-4c9f-9e9e-4a6a3f4e70d4"),
                            ProductId = new Guid("d4c7e1a5-3b92-4f86-92d1-0b5f3a7c4682"),
                            Quantity = 15,
                            UnitPrice = 210.00m
                        },
                        new
                        {
                            Id = new Guid("7a1bfb82-7a6e-47f9-bbbf-81093e4a2876"),
                            ImportInvoiceId = new Guid("b2d5cb4e-fc88-4c9f-9e9e-4a6a3f4e70d4"),
                            ProductId = new Guid("72c4bc6d-72f5-4b43-b299-cb1bcaa4cd93"),
                            Quantity = 7,
                            UnitPrice = 320.00m
                        },
                        new
                        {
                            Id = new Guid("ebef2229-41c0-41fa-a56c-f3a9d7618ad4"),
                            ImportInvoiceId = new Guid("b2d5cb4e-fc88-4c9f-9e9e-4a6a3f4e70d4"),
                            ProductId = new Guid("f1a5b3c7-74d9-4e8f-92b1-c3d2a0b5f8e6"),
                            Quantity = 20,
                            UnitPrice = 140.00m
                        },
                        new
                        {
                            Id = new Guid("328cc44d-d73f-4956-b2cb-dc7cd1c4f437"),
                            ImportInvoiceId = new Guid("b2d5cb4e-fc88-4c9f-9e9e-4a6a3f4e70d4"),
                            ProductId = new Guid("a0b5d4c3-7e92-4f81-bc2d-5f3a7d1e4689"),
                            Quantity = 10,
                            UnitPrice = 95.00m
                        },
                        new
                        {
                            Id = new Guid("4532b6e6-53cf-44a1-9392-8a85f2c89901"),
                            ImportInvoiceId = new Guid("b2d5cb4e-fc88-4c9f-9e9e-4a6a3f4e70d4"),
                            ProductId = new Guid("a5b3d7c2-9e1f-4f86-bc2d-0b5d4c3e7981"),
                            Quantity = 6,
                            UnitPrice = 65.00m
                        },
                        new
                        {
                            Id = new Guid("b0a77ed1-4c9b-4056-a05c-f01e6be521f0"),
                            ImportInvoiceId = new Guid("8e9d59b2-f682-4e4b-8230-538eef5772dc"),
                            ProductId = new Guid("72c4bc6d-72f5-4b43-b299-cb1bcaa4cd93"),
                            Quantity = 4,
                            UnitPrice = 310.00m
                        },
                        new
                        {
                            Id = new Guid("39e3849a-b72d-4372-94f6-7e42f7c3cb35"),
                            ImportInvoiceId = new Guid("8e9d59b2-f682-4e4b-8230-538eef5772dc"),
                            ProductId = new Guid("d4c7e1a5-3b92-4f86-92d1-0b5f3a7c4682"),
                            Quantity = 9,
                            UnitPrice = 90.00m
                        },
                        new
                        {
                            Id = new Guid("278b0a44-5c4e-42ff-a80f-dcc4b9acb306"),
                            ImportInvoiceId = new Guid("fa61f3b4-e46f-496e-b90f-bd470f5b68ac"),
                            ProductId = new Guid("b7c4d5e2-3a92-4f86-91b1-7d3a0b5e4683"),
                            Quantity = 4,
                            UnitPrice = 120.00m
                        },
                        new
                        {
                            Id = new Guid("1a396e47-1ff1-4f8b-b8c9-f3b82b3a8c83"),
                            ImportInvoiceId = new Guid("e50e7e92-b28f-47f7-99f3-ff442f234cb2"),
                            ProductId = new Guid("f1a5b3c7-74d9-4e8f-92b1-c3d2a0b5f8e6"),
                            Quantity = 15,
                            UnitPrice = 149.99m
                        },
                        new
                        {
                            Id = new Guid("d1a60174-118f-46b5-91a2-16a55e6a0b44"),
                            ImportInvoiceId = new Guid("e50e7e92-b28f-47f7-99f3-ff442f234cb2"),
                            ProductId = new Guid("e7a2c5d4-3b9f-4871-82c1-d5b4a0f6e398"),
                            Quantity = 8,
                            UnitPrice = 119.50m
                        },
                        new
                        {
                            Id = new Guid("cbf676be-59d0-4db7-b0ec-3cd7d32f2b73"),
                            ImportInvoiceId = new Guid("e50e7e92-b28f-47f7-99f3-ff442f234cb2"),
                            ProductId = new Guid("b4c9d2e7-1a3f-4856-bc91-f5d3a0b7e462"),
                            Quantity = 10,
                            UnitPrice = 199.99m
                        },
                        new
                        {
                            Id = new Guid("4b31e9db-d573-4d58-bd9f-0df688f5cd60"),
                            ImportInvoiceId = new Guid("e50e7e92-b28f-47f7-99f3-ff442f234cb2"),
                            ProductId = new Guid("c8f3a7d2-1b6e-4c5d-92f4-a0b5d4e7c9f1"),
                            Quantity = 5,
                            UnitPrice = 259.99m
                        },
                        new
                        {
                            Id = new Guid("3833b38d-828d-47ae-90bc-7fe2f21cb0cc"),
                            ImportInvoiceId = new Guid("e50e7e92-b28f-47f7-99f3-ff442f234cb2"),
                            ProductId = new Guid("a6a5c1b8-d5bc-46b5-b75c-0152e35e344e"),
                            Quantity = 20,
                            UnitPrice = 349.99m
                        },
                        new
                        {
                            Id = new Guid("b319cb60-043f-462f-8a06-6a17b66de6ea"),
                            ImportInvoiceId = new Guid("e50e7e92-b28f-47f7-99f3-ff442f234cb2"),
                            ProductId = new Guid("d4c7e1a5-3b92-4f86-92d1-0b5f3a7c4682"),
                            Quantity = 12,
                            UnitPrice = 449.99m
                        },
                        new
                        {
                            Id = new Guid("bb93b12f-c8b1-4d2e-a53b-1e05f0e6fe0a"),
                            ImportInvoiceId = new Guid("f8ed3bb4-d255-4928-8a29-c24e045f302d"),
                            ProductId = new Guid("72c4bc6d-72f5-4b43-b299-cb1bcaa4cd93"),
                            Quantity = 3,
                            UnitPrice = 289.99m
                        },
                        new
                        {
                            Id = new Guid("ed547c62-e8d2-413f-9c7d-cfffc8a9da6c"),
                            ImportInvoiceId = new Guid("f8ed3bb4-d255-4928-8a29-c24e045f302d"),
                            ProductId = new Guid("c3a9d582-74b6-4512-91a5-2643a1b682be"),
                            Quantity = 10,
                            UnitPrice = 159.99m
                        },
                        new
                        {
                            Id = new Guid("b3c5a697-dba0-4b5e-bb61-7f2c455e7ac1"),
                            ImportInvoiceId = new Guid("a38f5c8b-c8d6-4590-bf5f-f5d616f1c1b7"),
                            ProductId = new Guid("a6a5c1b8-d5bc-46b5-b75c-0152e35e344e"),
                            Quantity = 20,
                            UnitPrice = 109.99m
                        },
                        new
                        {
                            Id = new Guid("7c2e50c5-28ba-4234-b1ae-e1d70962b4ea"),
                            ImportInvoiceId = new Guid("c4f631f3-16a1-47a4-8987-5a4b9a24b4d6"),
                            ProductId = new Guid("f1a3b5c7-92d4-4f86-8b1d-0b5e4c3d7982"),
                            Quantity = 15,
                            UnitPrice = 59.99m
                        },
                        new
                        {
                            Id = new Guid("3bafbb58-56e0-4bba-9ab5-d70832ff56f4"),
                            ImportInvoiceId = new Guid("c4f631f3-16a1-47a4-8987-5a4b9a24b4d6"),
                            ProductId = new Guid("72c4bc6d-72f5-4b43-b299-cb1bcaa4cd93"),
                            Quantity = 8,
                            UnitPrice = 299.99m
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product identifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the Category");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the product, optional");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Name of the product");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Products available in the warehouse");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6a5c1b8-d5bc-46b5-b75c-0152e35e344e"),
                            CategoryId = new Guid("31bf5b32-a3f7-4e37-8230-2202a081ea87"),
                            Description = "Ergonomic wireless mouse with adjustable DPI settings.",
                            Name = "Wireless Mouse"
                        },
                        new
                        {
                            Id = new Guid("72c4bc6d-72f5-4b43-b299-cb1bcaa4cd93"),
                            CategoryId = new Guid("31bf5b32-a3f7-4e37-8230-2202a081ea87"),
                            Description = "High-quality mechanical keyboard with customizable RGB lighting.",
                            Name = "Mechanical Keyboard"
                        },
                        new
                        {
                            Id = new Guid("d9b37f82-0b4f-4c92-8821-f4b3b5dcd045"),
                            CategoryId = new Guid("31bf5b32-a3f7-4e37-8230-2202a081ea87"),
                            Description = "Over-ear gaming headset with noise cancellation and surround sound.",
                            Name = "Gaming Headset"
                        },
                        new
                        {
                            Id = new Guid("c3a9d582-74b6-4512-91a5-2643a1b682be"),
                            CategoryId = new Guid("31bf5b32-a3f7-4e37-8230-2202a081ea87"),
                            Description = "Multi-port USB-C hub with HDMI, Ethernet, and USB ports.",
                            Name = "USB-C Docking Station"
                        },
                        new
                        {
                            Id = new Guid("c8f3a7d2-1b6e-4c5d-92f4-a0b5d4e7c9f1"),
                            CategoryId = new Guid("31bf5b32-a3f7-4e37-8230-2202a081ea87"),
                            Description = "27-inch 4K UHD monitor with HDR and IPS panel.",
                            Name = "4K Monitor"
                        },
                        new
                        {
                            Id = new Guid("d4c7e1a5-3b92-4f86-92d1-0b5f3a7c4682"),
                            CategoryId = new Guid("31bf5b32-a3f7-4e37-8230-2202a081ea87"),
                            Description = "Professional-grade graphics tablet with pressure-sensitive stylus.",
                            Name = "Graphics Tablet"
                        },
                        new
                        {
                            Id = new Guid("e7a2c5d4-3b9f-4871-82c1-d5b4a0f6e398"),
                            CategoryId = new Guid("e3edc37f-6ba9-4616-b0c5-98c33451bcdb"),
                            Description = "Compact Bluetooth speaker with deep bass and long battery life.",
                            Name = "Bluetooth Speaker"
                        },
                        new
                        {
                            Id = new Guid("f1a3b5c7-92d4-4f86-8b1d-0b5e4c3d7982"),
                            CategoryId = new Guid("e3edc37f-6ba9-4616-b0c5-98c33451bcdb"),
                            Description = "Wi-Fi-enabled smart light bulb with color-changing options.",
                            Name = "Smart Light Bulb"
                        },
                        new
                        {
                            Id = new Guid("a4b3c7d5-9e1f-4f86-bc2d-0b5d4e3c7981"),
                            CategoryId = new Guid("e3edc37f-6ba9-4616-b0c5-98c33451bcdb"),
                            Description = "Compact coffee maker for brewing on the go.",
                            Name = "Portable Coffee Maker"
                        },
                        new
                        {
                            Id = new Guid("f1a5b3c7-74d9-4e8f-92b1-c3d2a0b5f8e6"),
                            CategoryId = new Guid("26ea2ad2-8d2c-4c43-939f-d7d818572aff"),
                            Description = "Flexible gooseneck smartphone holder for hands-free use.",
                            Name = "Smartphone Holder"
                        },
                        new
                        {
                            Id = new Guid("b4c9d2e7-1a3f-4856-bc91-f5d3a0b7e462"),
                            CategoryId = new Guid("26ea2ad2-8d2c-4c43-939f-d7d818572aff"),
                            Description = "Fast wireless charger compatible with Qi-enabled devices.",
                            Name = "Wireless Charger"
                        },
                        new
                        {
                            Id = new Guid("b7c4d5e2-3a92-4f86-91b1-7d3a0b5e4683"),
                            CategoryId = new Guid("26ea2ad2-8d2c-4c43-939f-d7d818572aff"),
                            Description = "20000mAh portable power bank with fast charging capabilities.",
                            Name = "Portable Power Bank"
                        },
                        new
                        {
                            Id = new Guid("b5e21436-3c45-4f52-a854-874bcf356f9d"),
                            CategoryId = new Guid("3daadd5e-f5c9-4222-9878-1a02faa44339"),
                            Description = "Adjustable aluminum laptop stand for improved ergonomics.",
                            Name = "Laptop Stand"
                        },
                        new
                        {
                            Id = new Guid("a0b5d4c3-7e92-4f81-bc2d-5f3a7d1e4689"),
                            CategoryId = new Guid("3daadd5e-f5c9-4222-9878-1a02faa44339"),
                            Description = "Adjustable office chair with lumbar support.",
                            Name = "Ergonomic Office Chair"
                        },
                        new
                        {
                            Id = new Guid("f3a5b7d2-1e9c-4f86-bc2d-0b5d4c3e7891"),
                            CategoryId = new Guid("3daadd5e-f5c9-4222-9878-1a02faa44339"),
                            Description = "Premium mechanical pencil set for precise writing and drawing.",
                            Name = "Mechanical Pencil Set"
                        },
                        new
                        {
                            Id = new Guid("ed2b3c7f-8a45-4d9e-80f4-b1c7d2a0f9b2"),
                            CategoryId = new Guid("dde109fb-71c5-4f59-8810-3bf4057c5351"),
                            Description = "1TB portable SSD with high-speed data transfer.",
                            Name = "Portable SSD"
                        },
                        new
                        {
                            Id = new Guid("b5c4d7e2-3a92-4f81-9b1f-7d3a0b5e4682"),
                            CategoryId = new Guid("dde109fb-71c5-4f59-8810-3bf4057c5351"),
                            Description = "2TB external hard drive for secure data backup.",
                            Name = "External Hard Drive"
                        },
                        new
                        {
                            Id = new Guid("d1c7e4a5-3b92-4f86-bc7d-1a0b5f3e4826"),
                            CategoryId = new Guid("314820d6-a4d4-4873-8dec-95e5a6904a8e"),
                            Description = "Fitness-focused smartwatch with heart rate monitoring.",
                            Name = "Smartwatch"
                        },
                        new
                        {
                            Id = new Guid("a5b3d7c2-9e1f-4f86-bc2d-0b5d4c3e7981"),
                            CategoryId = new Guid("314820d6-a4d4-4873-8dec-95e5a6904a8e"),
                            Description = "Next-gen VR headset with high-resolution display and tracking.",
                            Name = "VR Headset"
                        },
                        new
                        {
                            Id = new Guid("d2c7e5a4-3b91-4f86-92d1-0b5a3f7c4682"),
                            CategoryId = new Guid("314820d6-a4d4-4873-8dec-95e5a6904a8e"),
                            Description = "True wireless earbuds with active noise cancellation.",
                            Name = "Noise-Canceling Earbuds"
                        });
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Warehouse identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Warehouse address");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ID of the user who created the warehouse");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Shows the date of when the warehouse record was created");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if warehouse is deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Warehouse name");

                    b.Property<double?>("Size")
                        .HasColumnType("float")
                        .HasComment("Warehouse size in square meters (m²)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Name", "CreatedByUserId")
                        .IsUnique()
                        .HasFilter("[CreatedByUserId] IS NOT NULL");

                    b.ToTable("Warehouses", t =>
                        {
                            t.HasComment("Warehouses in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("b689e5b1-8c23-462d-b931-97a7d2b40470"),
                            Address = "Location A",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse A",
                            Size = 4650.0
                        },
                        new
                        {
                            Id = new Guid("be8f00a5-682d-4b43-9734-d3e17078cb52"),
                            Address = "Location B",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse B",
                            Size = 5200.0
                        },
                        new
                        {
                            Id = new Guid("c3e1a7d3-8e44-4f9b-bf8b-1d3f6e7f8d42"),
                            Address = "Location C",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse C",
                            Size = 4500.0
                        },
                        new
                        {
                            Id = new Guid("d5f6b4e8-3b67-4a7d-bc12-f4a9e6c8d351"),
                            Address = "Location D",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse D",
                            Size = 6300.0
                        },
                        new
                        {
                            Id = new Guid("e8a9c5b7-4d23-49fb-a91b-c6e1f2d8b643"),
                            Address = "Location E",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse E",
                            Size = 7100.0
                        },
                        new
                        {
                            Id = new Guid("f1c2d4a6-5b34-42d8-9c12-e3a7b8f6d921"),
                            Address = "Location F",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse F",
                            Size = 5400.0
                        },
                        new
                        {
                            Id = new Guid("a2b3c4d5-6e78-4f9a-bc12-d4e5f6a7b891"),
                            Address = "Location G",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse G",
                            Size = 5900.0
                        },
                        new
                        {
                            Id = new Guid("b4c5d6e7-8f91-42a3-bc12-e3f4a5d6b782"),
                            Address = "Location H",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse H",
                            Size = 4800.0
                        },
                        new
                        {
                            Id = new Guid("c6d7e8f9-1a23-45b4-bc12-d3e4f5a6b891"),
                            Address = "Location I",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse I",
                            Size = 5200.0
                        },
                        new
                        {
                            Id = new Guid("d8e9f1a2-3b45-47c6-bc12-e2f3a4d5b691"),
                            Address = "Location J",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Warehouse J",
                            Size = 6000.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ApplicationUserWarehouse", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserWarehouses")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Data.Models.Warehouse", "Warehouse")
                        .WithMany("WarehouseUsers")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ExportInvoice", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.Client", "Client")
                        .WithMany("ExportInvoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Data.Models.Warehouse", "Warehouse")
                        .WithMany("ExportInvoices")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ExportInvoiceDetail", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.ExportInvoice", "ExportInvoice")
                        .WithMany("ExportInvoicesDetails")
                        .HasForeignKey("ExportInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Data.Models.ImportInvoiceDetail", "ImportInvoiceDetail")
                        .WithMany("ExportInvoicesPerProduct")
                        .HasForeignKey("ImportInvoiceDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExportInvoice");

                    b.Navigation("ImportInvoiceDetail");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ImportInvoice", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.Client", "Supplier")
                        .WithMany("ImportInvoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Data.Models.Warehouse", "Warehouse")
                        .WithMany("ImportInvoices")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ImportInvoiceDetail", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.ImportInvoice", "ImportInvoice")
                        .WithMany("ImportInvoicesDetails")
                        .HasForeignKey("ImportInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseApp.Data.Models.Product", "Product")
                        .WithMany("ImportInvoicesDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ImportInvoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Product", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Warehouse", b =>
                {
                    b.HasOne("WarehouseApp.Data.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserWarehouses");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Client", b =>
                {
                    b.Navigation("ExportInvoices");

                    b.Navigation("ImportInvoices");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ExportInvoice", b =>
                {
                    b.Navigation("ExportInvoicesDetails");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ImportInvoice", b =>
                {
                    b.Navigation("ImportInvoicesDetails");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.ImportInvoiceDetail", b =>
                {
                    b.Navigation("ExportInvoicesPerProduct");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Product", b =>
                {
                    b.Navigation("ImportInvoicesDetails");
                });

            modelBuilder.Entity("WarehouseApp.Data.Models.Warehouse", b =>
                {
                    b.Navigation("ExportInvoices");

                    b.Navigation("ImportInvoices");

                    b.Navigation("WarehouseUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
